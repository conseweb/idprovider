// Code generated by protoc-gen-go.
// source: idp.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	idp.proto

It has these top-level messages:
	User
	Device
	Error
	AcquireCaptchaReq
	AcquireCaptchaRsp
	VerifyCaptchaReq
	VerifyCaptchaRsp
	RegisterUserReq
	RegisterUserRsp
	BindDeviceReq
	BindDeviceRsp
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// which way to unique a user
type SignUpType int32

const (
	SignUpType_EMAIL  SignUpType = 0
	SignUpType_MOBILE SignUpType = 1
)

var SignUpType_name = map[int32]string{
	0: "EMAIL",
	1: "MOBILE",
}
var SignUpType_value = map[string]int32{
	"EMAIL":  0,
	"MOBILE": 1,
}

func (x SignUpType) String() string {
	return proto.EnumName(SignUpType_name, int32(x))
}
func (SignUpType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// device OS
type DeviceOS int32

const (
	DeviceOS_UNKONWN DeviceOS = 0
	DeviceOS_MAC     DeviceOS = 1
	DeviceOS_LINUX   DeviceOS = 2
	DeviceOS_UNIX    DeviceOS = 3
	DeviceOS_WINDOWS DeviceOS = 4
	DeviceOS_IOS     DeviceOS = 5
	DeviceOS_ANDROID DeviceOS = 6
)

var DeviceOS_name = map[int32]string{
	0: "UNKONWN",
	1: "MAC",
	2: "LINUX",
	3: "UNIX",
	4: "WINDOWS",
	5: "IOS",
	6: "ANDROID",
}
var DeviceOS_value = map[string]int32{
	"UNKONWN": 0,
	"MAC":     1,
	"LINUX":   2,
	"UNIX":    3,
	"WINDOWS": 4,
	"IOS":     5,
	"ANDROID": 6,
}

func (x DeviceOS) String() string {
	return proto.EnumName(DeviceOS_name, int32(x))
}
func (DeviceOS) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// device for
type DeviceFor int32

const (
	DeviceFor_FARMER     DeviceFor = 0
	DeviceFor_LEDGER     DeviceFor = 1
	DeviceFor_TELLER     DeviceFor = 2
	DeviceFor_SUPERVISOR DeviceFor = 3
	DeviceFor_IDPROVIDER DeviceFor = 4
)

var DeviceFor_name = map[int32]string{
	0: "FARMER",
	1: "LEDGER",
	2: "TELLER",
	3: "SUPERVISOR",
	4: "IDPROVIDER",
}
var DeviceFor_value = map[string]int32{
	"FARMER":     0,
	"LEDGER":     1,
	"TELLER":     2,
	"SUPERVISOR": 3,
	"IDPROVIDER": 4,
}

func (x DeviceFor) String() string {
	return proto.EnumName(DeviceFor_name, int32(x))
}
func (DeviceFor) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ErrorType int32

const (
	ErrorType_NONE_ERROR      ErrorType = 0
	ErrorType_INVALID_PARAM   ErrorType = 1
	ErrorType_INTERNAL_ERROR  ErrorType = 2
	ErrorType_ALREADY_SIGNUP  ErrorType = 3
	ErrorType_INVALID_CAPTCHA ErrorType = 4
	ErrorType_INVALID_USERID  ErrorType = 5
	ErrorType_ALREADY_DEVICE  ErrorType = 6
)

var ErrorType_name = map[int32]string{
	0: "NONE_ERROR",
	1: "INVALID_PARAM",
	2: "INTERNAL_ERROR",
	3: "ALREADY_SIGNUP",
	4: "INVALID_CAPTCHA",
	5: "INVALID_USERID",
	6: "ALREADY_DEVICE",
}
var ErrorType_value = map[string]int32{
	"NONE_ERROR":      0,
	"INVALID_PARAM":   1,
	"INTERNAL_ERROR":  2,
	"ALREADY_SIGNUP":  3,
	"INVALID_CAPTCHA": 4,
	"INVALID_USERID":  5,
	"ALREADY_DEVICE":  6,
}

func (x ErrorType) String() string {
	return proto.EnumName(ErrorType_name, int32(x))
}
func (ErrorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// User class
// not for orm, just for easy code
type User struct {
	UserID  string    `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Email   string    `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Mobile  string    `protobuf:"bytes,3,opt,name=mobile" json:"mobile,omitempty"`
	Pass    string    `protobuf:"bytes,4,opt,name=pass" json:"pass,omitempty"`
	Nick    string    `protobuf:"bytes,5,opt,name=nick" json:"nick,omitempty"`
	Devices []*Device `protobuf:"bytes,6,rep,name=devices" json:"devices,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

// user device
type Device struct {
	UserID    string    `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	DeviceID  string    `protobuf:"bytes,2,opt,name=deviceID" json:"deviceID,omitempty"`
	Os        DeviceOS  `protobuf:"varint,3,opt,name=os,enum=protos.DeviceOS" json:"os,omitempty"`
	OsVersion string    `protobuf:"bytes,4,opt,name=osVersion" json:"osVersion,omitempty"`
	For       DeviceFor `protobuf:"varint,5,opt,name=for,enum=protos.DeviceFor" json:"for,omitempty"`
	Mac       string    `protobuf:"bytes,6,opt,name=mac" json:"mac,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Error struct {
	ErrorType ErrorType `protobuf:"varint,1,opt,name=errorType,enum=protos.ErrorType" json:"errorType,omitempty"`
	Message   string    `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// AcquireCaptchaReq holds request
type AcquireCaptchaReq struct {
	SignUpType SignUpType `protobuf:"varint,1,opt,name=signUpType,enum=protos.SignUpType" json:"signUpType,omitempty"`
	SignUp     string     `protobuf:"bytes,2,opt,name=signUp" json:"signUp,omitempty"`
}

func (m *AcquireCaptchaReq) Reset()                    { *m = AcquireCaptchaReq{} }
func (m *AcquireCaptchaReq) String() string            { return proto.CompactTextString(m) }
func (*AcquireCaptchaReq) ProtoMessage()               {}
func (*AcquireCaptchaReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type AcquireCaptchaRsp struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *AcquireCaptchaRsp) Reset()                    { *m = AcquireCaptchaRsp{} }
func (m *AcquireCaptchaRsp) String() string            { return proto.CompactTextString(m) }
func (*AcquireCaptchaRsp) ProtoMessage()               {}
func (*AcquireCaptchaRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AcquireCaptchaRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type VerifyCaptchaReq struct {
	SignUpType SignUpType `protobuf:"varint,1,opt,name=signUpType,enum=protos.SignUpType" json:"signUpType,omitempty"`
	SignUp     string     `protobuf:"bytes,2,opt,name=signUp" json:"signUp,omitempty"`
	Captcha    string     `protobuf:"bytes,3,opt,name=captcha" json:"captcha,omitempty"`
}

func (m *VerifyCaptchaReq) Reset()                    { *m = VerifyCaptchaReq{} }
func (m *VerifyCaptchaReq) String() string            { return proto.CompactTextString(m) }
func (*VerifyCaptchaReq) ProtoMessage()               {}
func (*VerifyCaptchaReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type VerifyCaptchaRsp struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *VerifyCaptchaRsp) Reset()                    { *m = VerifyCaptchaRsp{} }
func (m *VerifyCaptchaRsp) String() string            { return proto.CompactTextString(m) }
func (*VerifyCaptchaRsp) ProtoMessage()               {}
func (*VerifyCaptchaRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *VerifyCaptchaRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type RegisterUserReq struct {
	SignUpType SignUpType `protobuf:"varint,1,opt,name=signUpType,enum=protos.SignUpType" json:"signUpType,omitempty"`
	SignUp     string     `protobuf:"bytes,2,opt,name=signUp" json:"signUp,omitempty"`
	Nick       string     `protobuf:"bytes,3,opt,name=nick" json:"nick,omitempty"`
	Pass       string     `protobuf:"bytes,4,opt,name=pass" json:"pass,omitempty"`
}

func (m *RegisterUserReq) Reset()                    { *m = RegisterUserReq{} }
func (m *RegisterUserReq) String() string            { return proto.CompactTextString(m) }
func (*RegisterUserReq) ProtoMessage()               {}
func (*RegisterUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type RegisterUserRsp struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	User  *User  `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *RegisterUserRsp) Reset()                    { *m = RegisterUserRsp{} }
func (m *RegisterUserRsp) String() string            { return proto.CompactTextString(m) }
func (*RegisterUserRsp) ProtoMessage()               {}
func (*RegisterUserRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RegisterUserRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *RegisterUserRsp) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type BindDeviceReq struct {
	UserID    string    `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Os        DeviceOS  `protobuf:"varint,2,opt,name=os,enum=protos.DeviceOS" json:"os,omitempty"`
	OsVersion string    `protobuf:"bytes,3,opt,name=osVersion" json:"osVersion,omitempty"`
	For       DeviceFor `protobuf:"varint,4,opt,name=for,enum=protos.DeviceFor" json:"for,omitempty"`
	Mac       string    `protobuf:"bytes,5,opt,name=mac" json:"mac,omitempty"`
}

func (m *BindDeviceReq) Reset()                    { *m = BindDeviceReq{} }
func (m *BindDeviceReq) String() string            { return proto.CompactTextString(m) }
func (*BindDeviceReq) ProtoMessage()               {}
func (*BindDeviceReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type BindDeviceRsp struct {
	Error  *Error  `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Device *Device `protobuf:"bytes,2,opt,name=device" json:"device,omitempty"`
}

func (m *BindDeviceRsp) Reset()                    { *m = BindDeviceRsp{} }
func (m *BindDeviceRsp) String() string            { return proto.CompactTextString(m) }
func (*BindDeviceRsp) ProtoMessage()               {}
func (*BindDeviceRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BindDeviceRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *BindDeviceRsp) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "protos.User")
	proto.RegisterType((*Device)(nil), "protos.Device")
	proto.RegisterType((*Error)(nil), "protos.Error")
	proto.RegisterType((*AcquireCaptchaReq)(nil), "protos.AcquireCaptchaReq")
	proto.RegisterType((*AcquireCaptchaRsp)(nil), "protos.AcquireCaptchaRsp")
	proto.RegisterType((*VerifyCaptchaReq)(nil), "protos.VerifyCaptchaReq")
	proto.RegisterType((*VerifyCaptchaRsp)(nil), "protos.VerifyCaptchaRsp")
	proto.RegisterType((*RegisterUserReq)(nil), "protos.RegisterUserReq")
	proto.RegisterType((*RegisterUserRsp)(nil), "protos.RegisterUserRsp")
	proto.RegisterType((*BindDeviceReq)(nil), "protos.BindDeviceReq")
	proto.RegisterType((*BindDeviceRsp)(nil), "protos.BindDeviceRsp")
	proto.RegisterEnum("protos.SignUpType", SignUpType_name, SignUpType_value)
	proto.RegisterEnum("protos.DeviceOS", DeviceOS_name, DeviceOS_value)
	proto.RegisterEnum("protos.DeviceFor", DeviceFor_name, DeviceFor_value)
	proto.RegisterEnum("protos.ErrorType", ErrorType_name, ErrorType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for IDPP service

type IDPPClient interface {
	// Acquire email/tel captcha
	AcquireCaptcha(ctx context.Context, in *AcquireCaptchaReq, opts ...grpc.CallOption) (*AcquireCaptchaRsp, error)
	// Verify email/tel captcha
	VerifyCaptcha(ctx context.Context, in *VerifyCaptchaReq, opts ...grpc.CallOption) (*VerifyCaptchaRsp, error)
	// Register a user
	RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserRsp, error)
	// Bind a device for a user
	BindDeviceForUser(ctx context.Context, in *BindDeviceReq, opts ...grpc.CallOption) (*BindDeviceRsp, error)
}

type iDPPClient struct {
	cc *grpc.ClientConn
}

func NewIDPPClient(cc *grpc.ClientConn) IDPPClient {
	return &iDPPClient{cc}
}

func (c *iDPPClient) AcquireCaptcha(ctx context.Context, in *AcquireCaptchaReq, opts ...grpc.CallOption) (*AcquireCaptchaRsp, error) {
	out := new(AcquireCaptchaRsp)
	err := grpc.Invoke(ctx, "/protos.IDPP/AcquireCaptcha", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDPPClient) VerifyCaptcha(ctx context.Context, in *VerifyCaptchaReq, opts ...grpc.CallOption) (*VerifyCaptchaRsp, error) {
	out := new(VerifyCaptchaRsp)
	err := grpc.Invoke(ctx, "/protos.IDPP/VerifyCaptcha", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDPPClient) RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserRsp, error) {
	out := new(RegisterUserRsp)
	err := grpc.Invoke(ctx, "/protos.IDPP/RegisterUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDPPClient) BindDeviceForUser(ctx context.Context, in *BindDeviceReq, opts ...grpc.CallOption) (*BindDeviceRsp, error) {
	out := new(BindDeviceRsp)
	err := grpc.Invoke(ctx, "/protos.IDPP/BindDeviceForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IDPP service

type IDPPServer interface {
	// Acquire email/tel captcha
	AcquireCaptcha(context.Context, *AcquireCaptchaReq) (*AcquireCaptchaRsp, error)
	// Verify email/tel captcha
	VerifyCaptcha(context.Context, *VerifyCaptchaReq) (*VerifyCaptchaRsp, error)
	// Register a user
	RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserRsp, error)
	// Bind a device for a user
	BindDeviceForUser(context.Context, *BindDeviceReq) (*BindDeviceRsp, error)
}

func RegisterIDPPServer(s *grpc.Server, srv IDPPServer) {
	s.RegisterService(&_IDPP_serviceDesc, srv)
}

func _IDPP_AcquireCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireCaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDPPServer).AcquireCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.IDPP/AcquireCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDPPServer).AcquireCaptcha(ctx, req.(*AcquireCaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDPP_VerifyCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDPPServer).VerifyCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.IDPP/VerifyCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDPPServer).VerifyCaptcha(ctx, req.(*VerifyCaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDPP_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDPPServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.IDPP/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDPPServer).RegisterUser(ctx, req.(*RegisterUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDPP_BindDeviceForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDPPServer).BindDeviceForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.IDPP/BindDeviceForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDPPServer).BindDeviceForUser(ctx, req.(*BindDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _IDPP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.IDPP",
	HandlerType: (*IDPPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcquireCaptcha",
			Handler:    _IDPP_AcquireCaptcha_Handler,
		},
		{
			MethodName: "VerifyCaptcha",
			Handler:    _IDPP_VerifyCaptcha_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _IDPP_RegisterUser_Handler,
		},
		{
			MethodName: "BindDeviceForUser",
			Handler:    _IDPP_BindDeviceForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("idp.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 720 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x55, 0x4d, 0x4f, 0xdb, 0x4a,
	0x14, 0x25, 0x89, 0xe3, 0x90, 0x1b, 0x12, 0x9c, 0x79, 0x7a, 0x7a, 0x79, 0x51, 0x45, 0x91, 0x5b,
	0x55, 0x28, 0x0b, 0xd4, 0xa6, 0xfb, 0x4a, 0x26, 0x1e, 0x60, 0x84, 0x63, 0x47, 0x76, 0x1c, 0xa8,
	0xba, 0x40, 0x21, 0x0c, 0xd4, 0x2a, 0x89, 0x8d, 0x07, 0x2a, 0xb1, 0xe8, 0xbe, 0xfb, 0xfe, 0x81,
	0xfe, 0xd4, 0xce, 0x47, 0x0c, 0x71, 0x00, 0xa5, 0x12, 0xab, 0xcc, 0xdc, 0x8f, 0x73, 0xce, 0xb5,
	0xcf, 0x75, 0xa0, 0x1a, 0x9d, 0x27, 0xbb, 0x49, 0x1a, 0xdf, 0xc4, 0x48, 0x97, 0x3f, 0xcc, 0x4c,
	0x41, 0x0b, 0x19, 0x4d, 0x51, 0x03, 0xf4, 0x5b, 0xfe, 0x4b, 0xec, 0x56, 0x61, 0xbb, 0xb0, 0x53,
	0x45, 0x75, 0x28, 0xd3, 0xe9, 0x38, 0xba, 0x6a, 0x15, 0xe5, 0x95, 0xa7, 0xa7, 0xf1, 0x59, 0x74,
	0x45, 0x5b, 0x25, 0x79, 0xdf, 0x00, 0x2d, 0x19, 0x33, 0xd6, 0xd2, 0xb2, 0xdb, 0x2c, 0x9a, 0x7c,
	0x6b, 0x95, 0xe5, 0xed, 0x35, 0x54, 0xce, 0xe9, 0xf7, 0x68, 0x42, 0x59, 0x4b, 0xdf, 0x2e, 0xed,
	0xd4, 0xba, 0x0d, 0xc5, 0xc9, 0x76, 0x6d, 0x19, 0x36, 0x7f, 0x16, 0x40, 0x57, 0xc7, 0x47, 0xb4,
	0x06, 0xac, 0xab, 0x5e, 0x1e, 0x51, 0xcc, 0xaf, 0xa0, 0x18, 0x33, 0xc9, 0xda, 0xe8, 0x1a, 0x79,
	0x20, 0x2f, 0x40, 0x4d, 0xa8, 0xc6, 0x6c, 0x44, 0x53, 0x16, 0xc5, 0xb3, 0xb9, 0x98, 0x2d, 0x28,
	0x5d, 0xc4, 0xa9, 0xd4, 0xd2, 0xe8, 0x36, 0xf3, 0x1d, 0xfb, 0x71, 0x8a, 0x6a, 0x50, 0x9a, 0x8e,
	0x27, 0x5c, 0x1a, 0x2f, 0x36, 0x3f, 0x41, 0x19, 0xa7, 0x29, 0x8f, 0xbe, 0x85, 0x2a, 0x15, 0x87,
	0xe1, 0x5d, 0x42, 0xa5, 0x96, 0x85, 0x5e, 0x9c, 0x25, 0xd0, 0x26, 0x54, 0xa6, 0x94, 0xb1, 0xf1,
	0x25, 0x55, 0xea, 0xcc, 0x23, 0x68, 0x5a, 0x93, 0xeb, 0xdb, 0x28, 0xa5, 0xbd, 0x71, 0x72, 0x33,
	0xf9, 0x3a, 0xf6, 0xe9, 0x35, 0x7a, 0x07, 0xc0, 0xa2, 0xcb, 0x59, 0x98, 0x2c, 0x80, 0xa1, 0x0c,
	0x2c, 0xb8, 0xcf, 0x88, 0xe1, 0x55, 0xdd, 0x1c, 0xec, 0xc3, 0x23, 0x30, 0x96, 0xf0, 0xf9, 0xcb,
	0x52, 0x98, 0xc4, 0xa9, 0x75, 0xeb, 0x39, 0x51, 0xe6, 0x17, 0x30, 0xf8, 0xf4, 0xd1, 0xc5, 0xdd,
	0xcb, 0xe9, 0xc5, 0x70, 0x13, 0x85, 0xa2, 0x5e, 0xb2, 0xf9, 0x7e, 0x19, 0x7c, 0xa5, 0x1c, 0x0a,
	0x9b, 0x3e, 0xbd, 0x8c, 0xd8, 0x0d, 0x4d, 0x85, 0xab, 0x5e, 0xa2, 0x26, 0xf3, 0xd4, 0x13, 0x7e,
	0xe3, 0x4f, 0x3d, 0x4f, 0xb3, 0x4a, 0x17, 0x6a, 0x83, 0x26, 0x6c, 0x26, 0xa1, 0x6b, 0xdd, 0x8d,
	0x2c, 0x29, 0x9a, 0xcd, 0x1f, 0x50, 0xdf, 0x8b, 0x66, 0xe7, 0xca, 0x20, 0x42, 0xf1, 0xb2, 0x27,
	0x95, 0x03, 0x8b, 0x7f, 0xe3, 0xc0, 0xd2, 0xa2, 0x03, 0xb5, 0x15, 0x0e, 0x94, 0xdb, 0x62, 0xf6,
	0x73, 0xf4, 0x2b, 0x27, 0xd9, 0x02, 0x5d, 0x2d, 0xc8, 0x7c, 0x96, 0xa5, 0xdd, 0xea, 0xbc, 0x01,
	0x58, 0x78, 0xa8, 0x55, 0x6e, 0xef, 0xbe, 0x45, 0x1c, 0x63, 0x0d, 0x01, 0xe8, 0x7d, 0x6f, 0x8f,
	0x38, 0xd8, 0x28, 0x74, 0x4e, 0x60, 0xfd, 0x5e, 0x7f, 0x0d, 0x2a, 0xa1, 0x7b, 0xe4, 0xb9, 0xc7,
	0x2e, 0x2f, 0xaa, 0x40, 0xa9, 0x6f, 0xf5, 0x8c, 0x82, 0x68, 0x74, 0x88, 0x1b, 0x9e, 0x18, 0x45,
	0xb4, 0xce, 0xbf, 0x10, 0x2e, 0x39, 0x31, 0x4a, 0xa2, 0xf4, 0x98, 0xb8, 0xb6, 0x77, 0x1c, 0x18,
	0x9a, 0x28, 0x25, 0x5e, 0x60, 0x94, 0x45, 0xd4, 0x72, 0x6d, 0xdf, 0x23, 0xb6, 0xa1, 0x77, 0x3c,
	0xa8, 0x3e, 0xcc, 0xc9, 0x29, 0xf7, 0x2d, 0xbf, 0x8f, 0x7d, 0x45, 0xef, 0x60, 0xfb, 0x80, 0x9f,
	0x0b, 0xe2, 0x3c, 0xc4, 0x8e, 0xc3, 0xcf, 0x45, 0xfe, 0xb0, 0x21, 0x08, 0x07, 0xd8, 0x1f, 0x91,
	0xc0, 0xf3, 0x39, 0x07, 0xbf, 0x13, 0x7b, 0xe0, 0x7b, 0x23, 0x62, 0xf3, 0xbc, 0xd6, 0xf9, 0x55,
	0x80, 0xea, 0xc3, 0xfe, 0xf1, 0xac, 0xeb, 0xb9, 0xf8, 0x14, 0xfb, 0xbe, 0x27, 0x50, 0x9b, 0x50,
	0x27, 0xee, 0xc8, 0x72, 0x88, 0x7d, 0x3a, 0xb0, 0x7c, 0xab, 0xcf, 0xc1, 0x11, 0x34, 0x88, 0x3b,
	0xc4, 0xbe, 0x6b, 0x39, 0xf3, 0xb2, 0xa2, 0x88, 0x59, 0x8e, 0x8f, 0x2d, 0xfb, 0xf3, 0x69, 0x40,
	0x0e, 0xdc, 0x70, 0xc0, 0x89, 0xfe, 0x81, 0xcd, 0xac, 0xb5, 0x67, 0x0d, 0x86, 0xbd, 0x43, 0x8b,
	0x0f, 0x25, 0x9b, 0x55, 0x30, 0x0c, 0xb0, 0xcf, 0x47, 0x2a, 0x2f, 0x36, 0xdb, 0x78, 0x44, 0x7a,
	0xd8, 0xd0, 0xbb, 0xbf, 0x8b, 0xa0, 0x71, 0x99, 0x03, 0x74, 0xc8, 0x93, 0xb9, 0x95, 0x45, 0xff,
	0x67, 0x2f, 0xe4, 0xd1, 0x77, 0xa1, 0xfd, 0x5c, 0x8a, 0x25, 0xe6, 0x1a, 0xc2, 0x50, 0xcf, 0x2d,
	0x1b, 0x6a, 0x65, 0xd5, 0xcb, 0x0b, 0xde, 0x7e, 0x26, 0x23, 0x61, 0xf6, 0x60, 0x63, 0x71, 0x35,
	0xd0, 0x7f, 0x59, 0xed, 0xd2, 0x5e, 0xb6, 0x9f, 0x4e, 0x48, 0x8c, 0x1e, 0x34, 0x1f, 0x2c, 0xc9,
	0x5f, 0xa4, 0x04, 0xfa, 0x37, 0xab, 0xcf, 0x2d, 0x4b, 0xfb, 0xa9, 0xb0, 0x00, 0x39, 0x53, 0x7f,
	0x30, 0x1f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x4d, 0xae, 0xb2, 0x74, 0x06, 0x00, 0x00,
}
