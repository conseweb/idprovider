/*
Copyright Mojing Inc. 2016 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package protos;

// which way to unique a user
enum SignUpType {
    EMAIL = 0;
    MOBILE = 1;
}

// User class
// not for orm, just for easy code
message User {
    string email = 1;
    string mobile = 2;
    string pass = 3; // the pass using algo brypt(md5(user pass)), user pass can also be user real pass's md5
    string nick = 4;
    repeated Device devices = 5; // every user can hold lots of device, but now may be just one.
}

// device OS
enum DeviceOS {
    UNKONWN = 0;
    MAC = 1;
    LINUX = 2;
    UNIX = 3;
    WINDOWS = 4;
    IOS = 5;
    ANDROID = 6;
}

// device for
enum DeviceFor {
    FARMER = 0;
    LEDGER = 1;
    TELLER = 2;
    SUPERVISOR = 3;
    IDPROVIDER = 4;
}

// user device
message Device {
    DeviceOS os = 1;
    string osVersion = 2;
    DeviceFor for = 3;
    string mac = 4;
}

enum ErrorType {
    NONE_ERROR = 0;
    INVALID_PARAM = 1;
    INTERNAL_ERROR = 2;
    ALREADY_SIGNUP = 3;
    INVALID_CAPTCHA = 4;
}

message Error {
    ErrorType errorType = 1;
    string message = 2;
}

// idprovider public service
service IDPP {
    // Acquire email/tel captcha
    rpc AcquireCaptcha(AcquireCaptchaReq) returns (AcquireCaptchaRsp) {}
    // Verify email/tel captcha
    rpc VerifyCaptcha(VerifyCaptchaReq) returns (VerifyCaptchaRsp) {}
    // Register a user
    rpc RegisterUser(RegisterUserReq) returns (RegisterUserRsp) {}
}

// AcquireCaptchaReq holds request
message AcquireCaptchaReq {
    SignUpType signUpType = 1;
    string signUp = 2;
}

message AcquireCaptchaRsp {
    Error error = 1;
}

message VerifyCaptchaReq {
    SignUpType signUpType = 1;
    string signUp = 2;
    string captcha = 3;
}

message VerifyCaptchaRsp {
    Error error = 1;
}

message RegisterUserReq {
    SignUpType signUpType = 1;
    string signUp = 2;
    string nick = 3;
    string pass = 4;
}

message RegisterUserRsp {
    Error error = 1;
    User user = 2;
}