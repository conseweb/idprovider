// Code generated by protoc-gen-go.
// source: teller.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// NextLotteryInfoReq
type NextLotteryInfoReq struct {
}

func (m *NextLotteryInfoReq) Reset()                    { *m = NextLotteryInfoReq{} }
func (m *NextLotteryInfoReq) String() string            { return proto.CompactTextString(m) }
func (*NextLotteryInfoReq) ProtoMessage()               {}
func (*NextLotteryInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

// NextLotteryInfoRsp
type NextLotteryInfoRsp struct {
	Error     *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	StartTime int64  `protobuf:"varint,2,opt,name=startTime" json:"startTime,omitempty"`
	EndTime   int64  `protobuf:"varint,3,opt,name=endTime" json:"endTime,omitempty"`
}

func (m *NextLotteryInfoRsp) Reset()                    { *m = NextLotteryInfoRsp{} }
func (m *NextLotteryInfoRsp) String() string            { return proto.CompactTextString(m) }
func (*NextLotteryInfoRsp) ProtoMessage()               {}
func (*NextLotteryInfoRsp) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *NextLotteryInfoRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// LotteryTicket
type LotteryTicket struct {
	Fid string `protobuf:"bytes,1,opt,name=fid" json:"fid,omitempty"`
	Fx  uint64 `protobuf:"varint,2,opt,name=fx" json:"fx,omitempty"`
	Mr  uint64 `protobuf:"varint,3,opt,name=mr" json:"mr,omitempty"`
	Idx int64  `protobuf:"varint,4,opt,name=idx" json:"idx,omitempty"`
}

func (m *LotteryTicket) Reset()                    { *m = LotteryTicket{} }
func (m *LotteryTicket) String() string            { return proto.CompactTextString(m) }
func (*LotteryTicket) ProtoMessage()               {}
func (*LotteryTicket) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

// SendLotteryNumReq
type SendLotteryNumReq struct {
	Fid string `protobuf:"bytes,1,opt,name=fid" json:"fid,omitempty"`
	Fx  uint64 `protobuf:"varint,2,opt,name=fx" json:"fx,omitempty"`
}

func (m *SendLotteryNumReq) Reset()                    { *m = SendLotteryNumReq{} }
func (m *SendLotteryNumReq) String() string            { return proto.CompactTextString(m) }
func (*SendLotteryNumReq) ProtoMessage()               {}
func (*SendLotteryNumReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

// SendLotteryNumRsp
type SendLotteryNumRsp struct {
	Error  *Error         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Ticket *LotteryTicket `protobuf:"bytes,2,opt,name=ticket" json:"ticket,omitempty"`
}

func (m *SendLotteryNumRsp) Reset()                    { *m = SendLotteryNumRsp{} }
func (m *SendLotteryNumRsp) String() string            { return proto.CompactTextString(m) }
func (*SendLotteryNumRsp) ProtoMessage()               {}
func (*SendLotteryNumRsp) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *SendLotteryNumRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *SendLotteryNumRsp) GetTicket() *LotteryTicket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func init() {
	proto.RegisterType((*NextLotteryInfoReq)(nil), "protos.NextLotteryInfoReq")
	proto.RegisterType((*NextLotteryInfoRsp)(nil), "protos.NextLotteryInfoRsp")
	proto.RegisterType((*LotteryTicket)(nil), "protos.LotteryTicket")
	proto.RegisterType((*SendLotteryNumReq)(nil), "protos.SendLotteryNumReq")
	proto.RegisterType((*SendLotteryNumRsp)(nil), "protos.SendLotteryNumRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for LotteryAPI service

type LotteryAPIClient interface {
	// returns next lottery info, something about time begin, end etc...
	NextLotteryInfo(ctx context.Context, in *NextLotteryInfoReq, opts ...grpc.CallOption) (*NextLotteryInfoRsp, error)
	// receive lottery number form farmer
	SendLotteryNum(ctx context.Context, in *SendLotteryNumReq, opts ...grpc.CallOption) (*SendLotteryNumRsp, error)
}

type lotteryAPIClient struct {
	cc *grpc.ClientConn
}

func NewLotteryAPIClient(cc *grpc.ClientConn) LotteryAPIClient {
	return &lotteryAPIClient{cc}
}

func (c *lotteryAPIClient) NextLotteryInfo(ctx context.Context, in *NextLotteryInfoReq, opts ...grpc.CallOption) (*NextLotteryInfoRsp, error) {
	out := new(NextLotteryInfoRsp)
	err := grpc.Invoke(ctx, "/protos.LotteryAPI/NextLotteryInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotteryAPIClient) SendLotteryNum(ctx context.Context, in *SendLotteryNumReq, opts ...grpc.CallOption) (*SendLotteryNumRsp, error) {
	out := new(SendLotteryNumRsp)
	err := grpc.Invoke(ctx, "/protos.LotteryAPI/SendLotteryNum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LotteryAPI service

type LotteryAPIServer interface {
	// returns next lottery info, something about time begin, end etc...
	NextLotteryInfo(context.Context, *NextLotteryInfoReq) (*NextLotteryInfoRsp, error)
	// receive lottery number form farmer
	SendLotteryNum(context.Context, *SendLotteryNumReq) (*SendLotteryNumRsp, error)
}

func RegisterLotteryAPIServer(s *grpc.Server, srv LotteryAPIServer) {
	s.RegisterService(&_LotteryAPI_serviceDesc, srv)
}

func _LotteryAPI_NextLotteryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextLotteryInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryAPIServer).NextLotteryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.LotteryAPI/NextLotteryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryAPIServer).NextLotteryInfo(ctx, req.(*NextLotteryInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LotteryAPI_SendLotteryNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendLotteryNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryAPIServer).SendLotteryNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.LotteryAPI/SendLotteryNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryAPIServer).SendLotteryNum(ctx, req.(*SendLotteryNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _LotteryAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.LotteryAPI",
	HandlerType: (*LotteryAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NextLotteryInfo",
			Handler:    _LotteryAPI_NextLotteryInfo_Handler,
		},
		{
			MethodName: "SendLotteryNum",
			Handler:    _LotteryAPI_SendLotteryNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor5,
}

func init() { proto.RegisterFile("teller.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x4d, 0x1a, 0x2b, 0x9d, 0xd8, 0xaa, 0x83, 0x42, 0x0c, 0x1e, 0xca, 0x7a, 0xe9, 0xc5,
	0x1e, 0x22, 0x3e, 0x80, 0x07, 0xc1, 0xa2, 0x14, 0xd9, 0xf6, 0x05, 0xd4, 0x4c, 0x24, 0xd8, 0xfc,
	0xdb, 0xac, 0x10, 0x9f, 0xc7, 0x17, 0x95, 0x9d, 0x6c, 0x90, 0x1a, 0x8a, 0x9e, 0x32, 0xf3, 0x7d,
	0x33, 0xbf, 0xc9, 0x4c, 0x02, 0x87, 0x9a, 0x36, 0x1b, 0x52, 0xf3, 0x52, 0x15, 0xba, 0xc0, 0x21,
	0x3f, 0xea, 0xd0, 0x27, 0xa5, 0x0a, 0x2b, 0x8a, 0x53, 0xc0, 0x25, 0x35, 0xfa, 0xb1, 0xd0, 0x9a,
	0xd4, 0xe7, 0x22, 0x4f, 0x0a, 0x49, 0x95, 0xa8, 0xfa, 0x6a, 0x5d, 0xe2, 0x25, 0xec, 0x73, 0x6b,
	0xe0, 0x4c, 0x9d, 0x99, 0x1f, 0x8d, 0x5b, 0x44, 0x3d, 0xbf, 0x33, 0xa2, 0x6c, 0x3d, 0xbc, 0x80,
	0x51, 0xad, 0x9f, 0x95, 0x5e, 0xa7, 0x19, 0x05, 0xee, 0xd4, 0x99, 0x0d, 0xe4, 0x8f, 0x80, 0x01,
	0x1c, 0x50, 0x1e, 0xb3, 0x37, 0x60, 0xaf, 0x4b, 0xc5, 0x0a, 0xc6, 0x76, 0xdc, 0x3a, 0x7d, 0x7d,
	0x27, 0x8d, 0xc7, 0x30, 0x48, 0xd2, 0x98, 0x67, 0x8d, 0xa4, 0x09, 0x71, 0x02, 0x6e, 0xd2, 0x30,
	0xd3, 0x93, 0x6e, 0xd2, 0x98, 0x3c, 0x53, 0xcc, 0xf1, 0xa4, 0x9b, 0x29, 0xd3, 0x91, 0xc6, 0x4d,
	0xe0, 0x31, 0xd8, 0x84, 0xe2, 0x06, 0x4e, 0x56, 0x94, 0xc7, 0x16, 0xbc, 0xfc, 0xc8, 0x24, 0x55,
	0x7f, 0x83, 0xc5, 0x5b, 0xaf, 0xed, 0xbf, 0xdb, 0x5f, 0xc1, 0x50, 0xf3, 0xeb, 0x33, 0xcd, 0x8f,
	0xce, 0xba, 0xaa, 0xad, 0xdd, 0xa4, 0x2d, 0x8a, 0xbe, 0x1c, 0x00, 0xeb, 0xdc, 0x3e, 0x2d, 0xf0,
	0x01, 0x8e, 0x7e, 0x9d, 0x1d, 0xc3, 0x0e, 0xd0, 0xff, 0x4a, 0xe1, 0x4e, 0xaf, 0x2e, 0xc5, 0x1e,
	0xde, 0xc3, 0x64, 0x7b, 0x09, 0x3c, 0xef, 0xea, 0x7b, 0x37, 0x09, 0x77, 0x59, 0x86, 0xf4, 0xd2,
	0xfe, 0x38, 0xd7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x12, 0xec, 0x5b, 0x91, 0x4f, 0x02, 0x00,
	0x00,
}
