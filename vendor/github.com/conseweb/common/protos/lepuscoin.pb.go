// Code generated by protoc-gen-go.
// source: lepuscoin.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// account model digitalAssets
type Account struct {
	Addr    string               `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Balance uint64               `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	Txouts  map[string]*TX_TXOUT `protobuf:"bytes,3,rep,name=txouts" json:"txouts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Account) GetTxouts() map[string]*TX_TXOUT {
	if m != nil {
		return m.Txouts
	}
	return nil
}

// utxo tx
type TX struct {
	Version   uint64      `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Timestamp int64       `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Txin      []*TX_TXIN  `protobuf:"bytes,3,rep,name=txin" json:"txin,omitempty"`
	Txout     []*TX_TXOUT `protobuf:"bytes,4,rep,name=txout" json:"txout,omitempty"`
	Founder   string      `protobuf:"bytes,5,opt,name=founder" json:"founder,omitempty"`
	Coinbase  bool        `protobuf:"varint,6,opt,name=coinbase" json:"coinbase,omitempty"`
}

func (m *TX) Reset()                    { *m = TX{} }
func (m *TX) String() string            { return proto.CompactTextString(m) }
func (*TX) ProtoMessage()               {}
func (*TX) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *TX) GetTxin() []*TX_TXIN {
	if m != nil {
		return m.Txin
	}
	return nil
}

func (m *TX) GetTxout() []*TX_TXOUT {
	if m != nil {
		return m.Txout
	}
	return nil
}

// txin not specified who has this txin, because creator can use their txout only, txin must be creator's previous txout
type TX_TXIN struct {
	Ix         uint32 `protobuf:"varint,1,opt,name=ix" json:"ix,omitempty"`
	SourceHash string `protobuf:"bytes,2,opt,name=sourceHash" json:"sourceHash,omitempty"`
}

func (m *TX_TXIN) Reset()                    { *m = TX_TXIN{} }
func (m *TX_TXIN) String() string            { return proto.CompactTextString(m) }
func (*TX_TXIN) ProtoMessage()               {}
func (*TX_TXIN) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1, 0} }

type TX_TXOUT struct {
	Value uint64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Addr  string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Until int64  `protobuf:"varint,3,opt,name=until" json:"until,omitempty"`
}

func (m *TX_TXOUT) Reset()                    { *m = TX_TXOUT{} }
func (m *TX_TXOUT) String() string            { return proto.CompactTextString(m) }
func (*TX_TXOUT) ProtoMessage()               {}
func (*TX_TXOUT) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1, 1} }

// ExecResult is the result of processing a transaction
type ExecResult struct {
	SumCurrentOutputs uint64 `protobuf:"varint,1,opt,name=sumCurrentOutputs" json:"sumCurrentOutputs,omitempty"`
	SumPriorOutputs   uint64 `protobuf:"varint,2,opt,name=sumPriorOutputs" json:"sumPriorOutputs,omitempty"`
	IsCoinbase        bool   `protobuf:"varint,3,opt,name=isCoinbase" json:"isCoinbase,omitempty"`
}

func (m *ExecResult) Reset()                    { *m = ExecResult{} }
func (m *ExecResult) String() string            { return proto.CompactTextString(m) }
func (*ExecResult) ProtoMessage()               {}
func (*ExecResult) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

// QueryAddrResult is the result of query function query_addr
type QueryAddrResult struct {
	Account *Account `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *QueryAddrResult) Reset()                    { *m = QueryAddrResult{} }
func (m *QueryAddrResult) String() string            { return proto.CompactTextString(m) }
func (*QueryAddrResult) ProtoMessage()               {}
func (*QueryAddrResult) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *QueryAddrResult) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

// QueryAddrResults
type QueryAddrResults struct {
	Results []*QueryAddrResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *QueryAddrResults) Reset()                    { *m = QueryAddrResults{} }
func (m *QueryAddrResults) String() string            { return proto.CompactTextString(m) }
func (*QueryAddrResults) ProtoMessage()               {}
func (*QueryAddrResults) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *QueryAddrResults) GetResults() []*QueryAddrResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// LepuscoinInfo
type LepuscoinInfo struct {
	CoinTotal    uint64 `protobuf:"varint,1,opt,name=coinTotal" json:"coinTotal,omitempty"`
	AccountTotal uint64 `protobuf:"varint,2,opt,name=accountTotal" json:"accountTotal,omitempty"`
	TxoutTotal   uint64 `protobuf:"varint,3,opt,name=txoutTotal" json:"txoutTotal,omitempty"`
	TxTotal      uint64 `protobuf:"varint,4,opt,name=txTotal" json:"txTotal,omitempty"`
	Placeholder  string `protobuf:"bytes,5,opt,name=placeholder" json:"placeholder,omitempty"`
}

func (m *LepuscoinInfo) Reset()                    { *m = LepuscoinInfo{} }
func (m *LepuscoinInfo) String() string            { return proto.CompactTextString(m) }
func (*LepuscoinInfo) ProtoMessage()               {}
func (*LepuscoinInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func init() {
	proto.RegisterType((*Account)(nil), "protos.Account")
	proto.RegisterType((*TX)(nil), "protos.TX")
	proto.RegisterType((*TX_TXIN)(nil), "protos.TX.TXIN")
	proto.RegisterType((*TX_TXOUT)(nil), "protos.TX.TXOUT")
	proto.RegisterType((*ExecResult)(nil), "protos.ExecResult")
	proto.RegisterType((*QueryAddrResult)(nil), "protos.QueryAddrResult")
	proto.RegisterType((*QueryAddrResults)(nil), "protos.QueryAddrResults")
	proto.RegisterType((*LepuscoinInfo)(nil), "protos.LepuscoinInfo")
}

func init() { proto.RegisterFile("lepuscoin.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 519 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x53, 0x5f, 0x8b, 0xd3, 0x40,
	0x10, 0x27, 0x7f, 0xda, 0x5e, 0xa7, 0x9e, 0xad, 0xcb, 0x81, 0xa1, 0x8a, 0x94, 0x08, 0x12, 0x41,
	0x0a, 0xde, 0x81, 0x88, 0xf8, 0x72, 0x1c, 0x45, 0x0f, 0xc5, 0xd3, 0x25, 0x42, 0x5f, 0xb7, 0xc9,
	0x1e, 0x17, 0x4c, 0x77, 0xc3, 0xfe, 0x39, 0xd2, 0x77, 0xbf, 0x8e, 0x1f, 0xc0, 0x37, 0x3f, 0x9a,
	0xec, 0x6e, 0xf6, 0x9a, 0xab, 0x3e, 0x65, 0xe6, 0x37, 0x93, 0x99, 0xdf, 0xcc, 0xfc, 0x16, 0xa6,
	0x35, 0x6d, 0xb4, 0x2c, 0x78, 0xc5, 0x96, 0x8d, 0xe0, 0x8a, 0xa3, 0xa1, 0xfd, 0xc8, 0xf4, 0x77,
	0x00, 0xa3, 0xf3, 0xa2, 0xe0, 0x9a, 0x29, 0x84, 0x20, 0x26, 0x65, 0x29, 0x92, 0x60, 0x11, 0x64,
	0x63, 0x6c, 0x6d, 0x94, 0xc0, 0x68, 0x43, 0x6a, 0xc2, 0x0a, 0x9a, 0x84, 0x8b, 0x20, 0x8b, 0xb1,
	0x77, 0xd1, 0x19, 0x0c, 0x55, 0xcb, 0xb5, 0x92, 0x49, 0xb4, 0x88, 0xb2, 0xc9, 0xe9, 0x13, 0x57,
	0x59, 0x2e, 0xbb, 0x72, 0xcb, 0xdc, 0x46, 0x57, 0x4c, 0x89, 0x1d, 0xee, 0x52, 0xe7, 0x9f, 0x60,
	0xd2, 0x83, 0xd1, 0x0c, 0xa2, 0x1f, 0x74, 0xd7, 0x35, 0x34, 0x26, 0x7a, 0x01, 0x83, 0x5b, 0x52,
	0x6b, 0xd7, 0x6d, 0x72, 0x3a, 0xf3, 0x45, 0xf3, 0xf5, 0x32, 0x5f, 0x5f, 0x7d, 0xcf, 0xb1, 0x0b,
	0xbf, 0x0b, 0xdf, 0x06, 0xe9, 0x9f, 0x10, 0xc2, 0x7c, 0x6d, 0x28, 0xde, 0x52, 0x21, 0x2b, 0xce,
	0x6c, 0xa1, 0x18, 0x7b, 0x17, 0x3d, 0x85, 0xb1, 0xaa, 0xb6, 0x54, 0x2a, 0xb2, 0x6d, 0x6c, 0xc1,
	0x08, 0xef, 0x01, 0xf4, 0x1c, 0x62, 0xd5, 0x56, 0xac, 0xa3, 0x3f, 0xbd, 0xd7, 0xe9, 0xf2, 0x0b,
	0xb6, 0x41, 0xc3, 0xc7, 0x52, 0x4f, 0x62, 0x9b, 0xf5, 0x1f, 0x3e, 0x36, 0x6c, 0x48, 0x5c, 0x73,
	0xcd, 0x4a, 0x2a, 0x92, 0x81, 0x9d, 0xc6, 0xbb, 0x68, 0x0e, 0x47, 0x66, 0xef, 0x1b, 0x22, 0x69,
	0x32, 0x5c, 0x04, 0xd9, 0x11, 0xbe, 0xf3, 0xe7, 0x6f, 0x20, 0x36, 0xbd, 0xd0, 0x43, 0x08, 0xab,
	0xd6, 0xb2, 0x3f, 0xc6, 0x61, 0xd5, 0xa2, 0x67, 0x00, 0x92, 0x6b, 0x51, 0xd0, 0x8f, 0x44, 0xde,
	0x58, 0xe6, 0x63, 0xdc, 0x43, 0xe6, 0x1f, 0x60, 0x60, 0xbb, 0xa3, 0x13, 0xbf, 0x2e, 0x37, 0xb9,
	0x73, 0xee, 0x0e, 0x19, 0xf6, 0x0e, 0x79, 0x02, 0x03, 0xcd, 0x54, 0x55, 0x27, 0x91, 0xdd, 0x83,
	0x73, 0xd2, 0x9f, 0x01, 0xc0, 0xaa, 0xa5, 0x05, 0xa6, 0x52, 0xd7, 0x0a, 0xbd, 0x82, 0x47, 0x52,
	0x6f, 0x2f, 0xb4, 0x10, 0x94, 0xa9, 0x2b, 0xad, 0x1a, 0x73, 0x5e, 0x57, 0xfa, 0xdf, 0x00, 0xca,
	0x60, 0x2a, 0xf5, 0xf6, 0xab, 0xa8, 0xb8, 0xf0, 0xb9, 0x4e, 0x23, 0x87, 0xb0, 0x99, 0xa7, 0x92,
	0x17, 0x7e, 0x0b, 0x91, 0xdd, 0x42, 0x0f, 0x49, 0xdf, 0xc3, 0xf4, 0x9b, 0xa6, 0x62, 0x77, 0x5e,
	0x96, 0xa2, 0xa3, 0xf2, 0x12, 0x46, 0xc4, 0x09, 0xc9, 0x12, 0xe8, 0x1d, 0xa8, 0xd3, 0x17, 0xf6,
	0xf1, 0x74, 0x05, 0xb3, 0x83, 0xbf, 0x25, 0x7a, 0x0d, 0x23, 0xe1, 0xcc, 0x24, 0xb0, 0x97, 0x7b,
	0xec, 0x7f, 0x3f, 0x48, 0xc5, 0x3e, 0x2f, 0xfd, 0x15, 0xc0, 0xf1, 0x67, 0xff, 0x4c, 0x2e, 0xd9,
	0x35, 0x37, 0xfa, 0x31, 0x76, 0xce, 0x15, 0xa9, 0xbb, 0x35, 0xec, 0x01, 0x94, 0xc2, 0x83, 0x8e,
	0x81, 0x4b, 0x70, 0xb3, 0xdf, 0xc3, 0xcc, 0xe0, 0x56, 0x1f, 0x2e, 0x23, 0xb2, 0x19, 0x3d, 0xc4,
	0xc8, 0x46, 0xb5, 0x2e, 0x18, 0x3b, 0xed, 0x76, 0x2e, 0x5a, 0xc0, 0xa4, 0xa9, 0x49, 0x41, 0x6f,
	0x78, 0xbd, 0x17, 0x55, 0x1f, 0xda, 0xb8, 0x27, 0x7c, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0xc1,
	0x64, 0x79, 0xef, 0xdc, 0x03, 0x00, 0x00,
}
